package ssg.serverlessblog.daobase;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.ObjectMapper;

import ssg.serverlessblog.documentref.SettingDoc;
import ssg.serverlessblog.documentref.UserDoc;
import ssg.serverlessblog.system.Env;
import ssg.serverlessblog.util.AppConst;
import ssg.serverlessblog.util.PasswordUtil;
import ssg.serverlessblog.util.SampleDataUtil;

public class SystemLogic {
	private static final Logger logger = LoggerFactory.getLogger(SystemLogic.class);


	static public void createInitialSystemData() throws Exception {
		try {
			//check if data already exists.
			//create data only when this logic runs for the first time for a given
			//database.			
			if(UserLogic.getUser("admin").isPresent()){
				//data exists, don't create any data.
				return;
			}

			final ObjectMapper mapper = new ObjectMapper();
			var pass = "";
			//create user data.			
			{
				final Map<String, Object> data = new HashMap<>();
				final Optional<String> salt = PasswordUtil.generateSalt(30);
				
				//generate random password
				pass = "pass_" + PasswordUtil.generateSalt(5).get();
				
				final Optional<String> password = PasswordUtil.hashPassword(pass,salt.get());
				data.put(UserDoc.field_salt, salt.get());
				data.put(UserDoc.field_password, password.get());
				data.put(UserDoc.field_created_at, new Date());
				data.put(UserDoc.field_updated_at, new Date());
				

				Env.userDao.createUser("admin", data);
				logger.info("User data created.");
			}
			//Create setting data.
			{
				final Map<String, Object> data = new HashMap<>();
				data.put(SettingDoc.field_blog_title, "My Blog");
				data.put(SettingDoc.field_blog_subtitle, "Subtitle goes here");
				data.put(SettingDoc.field_created_at, new Date());
				data.put(SettingDoc.field_icon_url, "");
				data.put(SettingDoc.field_favicon_url, "");
				data.put(SettingDoc.field_updated_at, null);
				data.put(SettingDoc.field_gae_ai_project_id, "");
				data.put(SettingDoc.field_gae_ai_location, "");
				
				Env.settingDao.createSetting(data);
				logger.info("Setting data created.");
			}
			//Create sample tags.
			{
				var tagId1 = TagLogic.createTag("My Tag", "[]");
				TagLogic.updateTag(tagId1, "My Tag", "[]", "Example tag generated by the system.");
				
				var tagId2 = TagLogic.createTag("Sample Tag", "[]");
				TagLogic.updateTag(tagId2, "Sample Tag", "[]", "Example tag generated by the system.");

				//Create sample articles.			
				var articleId = ArticleLogic.createArticle(SampleDataUtil.getSampleArticle("1"));
				ArticleLogic.updateArticleTag(articleId, List.of( tagId2));
				articleId = ArticleLogic.createArticle(SampleDataUtil.getSampleArticle("2"));
				ArticleLogic.updateArticleTag(articleId, List.of( tagId2));
				articleId = ArticleLogic.createArticle(SampleDataUtil.getSampleArticle("3"));
				ArticleLogic.updateArticleTag(articleId, List.of( tagId2));
				articleId = ArticleLogic.createArticle(SampleDataUtil.getSampleArticle("4"));
				ArticleLogic.updateArticleTag(articleId, List.of( tagId2));
				articleId = ArticleLogic.createArticle(SampleDataUtil.getSampleArticle("5"));
				ArticleLogic.updateArticleTag(articleId, List.of( tagId2));
				articleId = ArticleLogic.createArticle(SampleDataUtil.getSampleArticle("6"));
				ArticleLogic.updateArticleTag(articleId, List.of( tagId2));
				articleId = ArticleLogic.createArticle(SampleDataUtil.getSampleArticle("7"));
				ArticleLogic.updateArticleTag(articleId, List.of( tagId2));
				
				//create one with login. Show it at top.
				articleId = ArticleLogic.createArticle(SampleDataUtil.getSampleArticleWelcome(pass));
				ArticleLogic.updateArticleTag(articleId, List.of(tagId1, tagId2));
			}
			//Create Page components.
			{
				//profile picture
				PageComponentLogic.createPageComponent(AppConst.PC_TYPE_PROFILE_PIC,
						mapper.writeValueAsString(SampleDataUtil.getSampleProfilePic()), 20L, true);				
			}
			{
				//profile picture
				PageComponentLogic.createPageComponent(AppConst.PC_TYPE_TEXT_BOX,
						mapper.writeValueAsString(SampleDataUtil.getSampleTextBoxAboutMe()), 25L, true);				
			}
			{
				//Link List
				PageComponentLogic.createPageComponent(AppConst.PC_TYPE_LINK_LIST,
						mapper.writeValueAsString(SampleDataUtil.getSampleLinkList()), 30L, true);
			}
			{
				//Tags
				PageComponentLogic.createPageComponent(AppConst.PC_TYPE_TAGS,
						"{}", 40L, true);
			}
		}catch(Exception e) {
			throw e;
		}
	}
}
